syntax = "proto3";
package pb;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

message Error {
    string code = 1;
    string message = 2;
    string data = 3;
    string log = 4;
}

message NodeInfo {
    message ProtocolVersion {
        string p2p = 3;
        string block = 1;
        string app = 2;
    }
    ProtocolVersion protocol_version = 8;
    string id = 1;
    string listen_addr = 2;
    string network = 3;
    string version = 4;
    string channels = 5;
    string moniker = 6;
    message Other {
        string tx_index = 2;
        string rpc_address = 1;
    }
    Other other = 7;
}
message NetInfoResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        bool listening = 4;
        repeated string listeners = 1;
        string n_peers = 2;
        message Peer {
            NodeInfo node_info = 4;
            bool is_outbound = 1;
            message ConnectionStatus {
                string Duration = 4;
                message Monitor {
                    bool Active = 13;
                    string Start = 1;
                    string Duration = 2;
                    string Idle = 3;
                    string Bytes = 4;
                    string Samples = 5;
                    string InstRate = 6;
                    string CurRate = 7;
                    string AvgRate = 8;
                    string PeakRate = 9;
                    string BytesRem = 10;
                    string TimeRem = 11;
                    string Progress = 12;
                }
                Monitor SendMonitor = 1;
                Monitor RecvMonitor = 2;
                message Channel {
                    string ID = 5;
                    string SendQueueCapacity = 1;
                    string SendQueueSize = 2;
                    string Priority = 3;
                    string RecentlySent = 4;
                }
                repeated Channel Channels = 3;
            }
            ConnectionStatus connection_status = 2;
            string remote_ip = 3;
        }
        repeated Peer peers = 3;
    }
    Result result = 3;
    Error error = 4;
}
message StatusResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string version = 7;
        string latest_block_hash = 1;
        string latest_app_hash = 2;
        string latest_block_height = 3;
        string latest_block_time = 4;
        string keep_last_states = 5;
        message TmStatus {
            NodeInfo node_info = 3;
            message SyncInfo {
                string latest_block_hash = 5;
                string latest_app_hash = 1;
                string latest_block_height = 2;
                string latest_block_time = 3;
                bool catching_up = 4;
            }
            SyncInfo sync_info = 1;
            message ValidatorInfo {
                string address = 3;
                message PubKey {
                    string type = 2;
                    string value = 1;
                }
                PubKey public_key = 1;
                string voting_power = 2;
            }
            ValidatorInfo validator_info = 2;
        }
        TmStatus tm_status = 6;
    }
    Result result = 3;
    Error error = 4;
}
message GenesisResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        message Genesis {
            string genesis_time = 1;
            string chain_id = 2;
            message ConsensusParams {
                message Block {
                    string max_bytes = 1;
                    string max_gas = 2;
                    string time_iota_ms = 3;
                }
                Block block = 1;
                message Evidence {
                    string max_age = 1;
                }
                Evidence evidence = 2;
                message Validator {
                    repeated string public_key_types = 1;
                }
                Validator validator = 3;
            }
            ConsensusParams consensus_params = 3;
            string app_hash = 4;
            message AppState {
                string start_height = 1;
                message Validator {
                    string reward_address = 1;
                    string total_bip_stake = 2;
                    string public_key = 3;
                    string commission = 4;
                    string accum_reward = 5;
                    string absent_times = 6;
                }
                repeated Validator validators = 2;
                message Candidate {
                    string reward_address = 1;
                    string owner_address = 2;
                    string total_bip_stake = 3;
                    string public_key = 4;
                    string commission = 5;
                    message Stake {
                        string owner = 1;
                        string coin = 2;
                        string value = 3;
                        string bip_value = 4;
                    }
                    repeated Stake stakes = 6;
                    string created_at_block = 7;
                    double status = 8;
                }
                repeated Candidate candidates = 3;
                message Account {
                    string address = 1;
                    message Balance {
                        string coin = 1;
                        string value = 2;
                    }
                    repeated Balance balance = 2;
                    string nonce = 3;
                }
                repeated Account accounts = 4;
                string max_gas = 5;
                string total_slashed = 6;
            }
            AppState app_state = 5;
        }
        Genesis genesis = 1;
    }
    Result result = 3;
    Error error = 4;
}
message MinGasPriceResponse {
    string jsonrpc = 1;
    string id = 2;
    string result = 3;
    Error error = 4;
}

message BlockRequest {
    int64 height = 1;
}
message BlockResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string hash = 1;
        string height = 2;
        string time = 3;
        string num_txs = 4;
        string total_txs = 5;

        message Transaction {
            string hash = 1;
            string raw_tx = 2;
            string from = 3;
            string nonce = 4;
            string gas_price = 5;
            string type = 6;
            google.protobuf.Struct data = 7;
            bytes payload = 8;
            bytes service_data = 9;
            string gas = 10;
            string gas_coin = 11;
            map<string, string> tags = 12;
            string code = 13;
            string log = 14;
        }

        repeated Transaction transactions = 6;
        string block_reward = 7;
        string size = 8;
        string proposer = 9;
        message Validator {
            string public_key = 1;
            bool signed = 2;
        }
        repeated Validator validators = 10;
        message Evidence {
            message Evidence {

            }
            repeated Evidence evidence = 1;
        }
        Evidence evidence = 11;
    }
    Result result = 3;
    Error error = 4;
}

message MaxGasRequest {
    int32 height = 1;
}
message MaxGasResponse {
    string jsonrpc = 1;
    string id = 2;
    string result = 3;
    Error error = 4;
}

message AddressRequest {
    string address = 1;
    int32 height = 2;
}
message AddressResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        map<string, string> balance = 1;
        string transaction_count = 2;
    }
    Result result = 3;
    Error error = 4;
}

message AddressesRequest {
    repeated string addresses = 1;
    int32 height = 2;
}
message AddressesResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string address = 1;
        map<string, string> balance = 2;
        string transaction_count = 3;
    }
    repeated Result result = 3;
    Error error = 4;
}

message CandidateRequest {
    string public_key = 1;
    int32 height = 2;
}
message CandidateResult {
    string reward_address = 1;
    string total_stake = 2;
    string public_key = 3;
    string commission = 4;
    message Stake {
        string owner = 1;
        string coin = 2;
        string value = 3;
        string bip_value = 4;
    }
    repeated Stake stakes = 5;
    string status = 6;
}
message CandidateResponse {
    string jsonrpc = 1;
    string id = 2;
    CandidateResult result = 3;
    Error error = 4;
}

message CandidatesRequest {
    int32 height = 1;
    bool include_stakes = 2;
}
message CandidatesResponse {
    string jsonrpc = 1;
    string id = 2;
    repeated CandidateResult result = 3;
    Error error = 4;
}

message CoinInfoRequest {
    int32 height = 1;
    string symbol = 2;
}
message CoinInfoResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string name = 1;
        string symbol = 2;
        string volume = 3;
        string crr = 4;
        string reserve_balance = 5;
    }
    Result result = 3;
    Error error = 4;
}

message SendTransactionResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string code = 1;
        string data = 2;
        string log = 3;
        string hash = 4;
    }
    Result result = 3;
    Error error = 4;
}
message SendTransactionRequest {
    string tx = 1;
}

message TransactionResult {
    string hash = 1;
    string raw_tx = 2;
    string height = 3;
    string index = 4;
    string from = 5;
    string nonce = 6;
    string gas = 7;
    string gas_price = 8;
    string gas_coin = 9;
    string type = 10;
    google.protobuf.Struct data = 11;
    bytes payload = 12;
    map<string, string> tags = 13;
    string code = 14;
    string log = 15;
}
message TransactionResponse {
    string jsonrpc = 1;
    string id = 2;
    TransactionResult result = 3;
    Error error = 4;
}
message TransactionRequest {
    string hash = 1;
}

message TransactionsResponse {
    string jsonrpc = 1;
    string id = 2;
    repeated TransactionResult result = 3;
    Error error = 4;
}
message TransactionsRequest {
    string query = 1;
    int32 page = 2;
    int32 perPage = 3;
}

message EstimateCoinBuyRequest {
    string coin_to_buy = 1;
    string coin_to_sell = 2;
    string value_to_buy = 3;
    int32 height = 4;
}
message EstimateCoinBuyResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string will_pay = 1;
        string commission = 2;
    }
    Result result = 3;
    Error error = 4;
}

message EstimateCoinSellRequest {
    string coin_to_sell = 1;
    string coin_to_buy = 2;
    string value_to_sell = 3;
    int32 height = 4;
}
message EstimateCoinSellResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string will_get = 1;
        string commission = 2;
    }
    Result result = 3;
    Error error = 4;
}

message EstimateCoinSellAllResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string will_get = 1;
    }
    Result result = 3;
    Error error = 4;
}
message EstimateCoinSellAllRequest {
    string coin_to_sell = 1;
    string coin_to_buy = 2;
    string value_to_sell = 3;
    uint64 gas_price = 4;
    int32 height = 5;
}

message EstimateTxCommissionResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string commission = 1;
    }
    Result result = 3;
    Error error = 4;
}
message EstimateTxCommissionRequest {
    string tx = 1;
    int32 height = 2;
}

message EventsRequest {
    int32 height = 1;
}
message EventsResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        message Event {
            string type = 1;
            map<string, string> value = 2;
        }
        repeated Event events = 1;
    }
    Result result = 3;
    Error error = 4;
}

message MissedBlocksRequest {
    string public_key = 1;
    int32 height = 2;
}
message MissedBlocksResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string missed_blocks = 1;
        string missed_blocks_count = 2;
    }
    Result result = 3;
    Error error = 4;
}

message UnconfirmedTxsResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string n_txs = 1;
        string total = 2;
        string total_bytes = 3;
        repeated string txs = 4;
    }
    Result result = 3;
    Error error = 4;
}
message UnconfirmedTxsRequest {
    int32 limit = 1;
}

message ValidatorsRequest {
    int32 height = 1;
}
message ValidatorsResponse {
    string jsonrpc = 1;
    string id = 2;
    message Result {
        string public_key = 1;
        string voting_power = 2;
    }
    repeated Result result = 3;
    Error error = 4;
}

service HttpService {

    rpc Genesis (google.protobuf.Empty) returns (GenesisResponse) {
        option (google.api.http) = {
            get: "/genesis"
        };
    }

    rpc MinGasPrice (google.protobuf.Empty) returns (MinGasPriceResponse) {
        option (google.api.http) = {
            get: "/min_gas_price"
        };
    }

    rpc NetInfo (google.protobuf.Empty) returns (NetInfoResponse) {
        option (google.api.http) = {
            get: "/net_info"
        };
    }

    rpc Status (google.protobuf.Empty) returns (StatusResponse) {
        option (google.api.http) = {
            get: "/status"
        };
    }

    rpc Address (AddressRequest) returns (AddressResponse) {
        option (google.api.http) = {
            get: "/address"
        };
    }

    rpc Addresses (AddressesRequest) returns (AddressesResponse) {
        option (google.api.http) = {
            get: "/addresses"
        };
    }

    rpc Block (BlockRequest) returns (BlockResponse) {
        option (google.api.http) = {
            get: "/block"
        };
    }

    rpc Candidate (CandidateRequest) returns (CandidateResponse) {
        option (google.api.http) = {
            get: "/candidate"
        };
    }

    rpc Candidates (CandidatesRequest) returns (CandidatesResponse) {
        option (google.api.http) = {
            get: "/candidates"
        };
    }

    rpc CoinInfo (CoinInfoRequest) returns (CoinInfoResponse) {
        option (google.api.http) = {
            get: "/coin_info"
        };
    }

    rpc EstimateCoinBuy (EstimateCoinBuyRequest) returns (EstimateCoinBuyResponse) {
        option (google.api.http) = {
            get: "/estimate_coin_buy"
        };
    }

    rpc EstimateCoinSell (EstimateCoinSellRequest) returns (EstimateCoinSellResponse) {
        option (google.api.http) = {
            get: "/estimate_coin_sell"
        };
    }

    rpc EstimateCoinSellAll (EstimateCoinSellAllRequest) returns (EstimateCoinSellAllResponse) {
        option (google.api.http) = {
            get: "/estimate_coin_sell_all"
        };
    }

    rpc EstimateTxCommission (EstimateTxCommissionRequest) returns (EstimateTxCommissionResponse) {
        option (google.api.http) = {
            get: "/estimate_tx_commission"
        };
    }

    rpc Events (EventsRequest) returns (EventsResponse) {
        option (google.api.http) = {
            get: "/events"
        };
    }

    rpc MaxGas (MaxGasRequest) returns (MaxGasResponse) {
        option (google.api.http) = {
            get: "/max_gas"
        };
    }

    rpc MissedBlocks (MissedBlocksRequest) returns (MissedBlocksResponse) {
        option (google.api.http) = {
            get: "/missed_blocks"
        };
    }

    rpc SendTransaction (SendTransactionRequest) returns (SendTransactionResponse) {
        option (google.api.http) = {
            get: "/send_transaction"
        };
    }

    rpc Transaction (TransactionRequest) returns (TransactionResponse) {
        option (google.api.http) = {
            get: "/transaction"
        };
    }

    rpc Transactions (TransactionsRequest) returns (TransactionsResponse) {
        option (google.api.http) = {
            get: "/transactions"
        };
    }

    rpc UnconfirmedTxs (UnconfirmedTxsRequest) returns (UnconfirmedTxsResponse) {
        option (google.api.http) = {
            get: "/unconfirmed_txs"
        };
    }

    rpc Validators (ValidatorsRequest) returns (ValidatorsResponse) {
        option (google.api.http) = {
            get: "/validators"
        };
    }
}